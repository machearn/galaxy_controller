// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/machearn/galaxy_controller/pb (interfaces: GalaxyClient)

// Package mockpb is a generated GoMock package.
package mockpb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/machearn/galaxy_controller/pb"
	grpc "google.golang.org/grpc"
)

// MockGalaxyClient is a mock of GalaxyClient interface.
type MockGalaxyClient struct {
	ctrl     *gomock.Controller
	recorder *MockGalaxyClientMockRecorder
}

// MockGalaxyClientMockRecorder is the mock recorder for MockGalaxyClient.
type MockGalaxyClientMockRecorder struct {
	mock *MockGalaxyClient
}

// NewMockGalaxyClient creates a new mock instance.
func NewMockGalaxyClient(ctrl *gomock.Controller) *MockGalaxyClient {
	mock := &MockGalaxyClient{ctrl: ctrl}
	mock.recorder = &MockGalaxyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGalaxyClient) EXPECT() *MockGalaxyClientMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockGalaxyClient) Authorize(arg0 context.Context, arg1 *pb.AuthRequest, arg2 ...grpc.CallOption) (*pb.AuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Authorize", varargs...)
	ret0, _ := ret[0].(*pb.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockGalaxyClientMockRecorder) Authorize(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockGalaxyClient)(nil).Authorize), varargs...)
}

// CreateEntry mocks base method.
func (m *MockGalaxyClient) CreateEntry(arg0 context.Context, arg1 *pb.CreateEntryRequest, arg2 ...grpc.CallOption) (*pb.CreateEntryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEntry", varargs...)
	ret0, _ := ret[0].(*pb.CreateEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntry indicates an expected call of CreateEntry.
func (mr *MockGalaxyClientMockRecorder) CreateEntry(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntry", reflect.TypeOf((*MockGalaxyClient)(nil).CreateEntry), varargs...)
}

// CreateItem mocks base method.
func (m *MockGalaxyClient) CreateItem(arg0 context.Context, arg1 *pb.CreateItemRequest, arg2 ...grpc.CallOption) (*pb.CreateItemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateItem", varargs...)
	ret0, _ := ret[0].(*pb.CreateItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockGalaxyClientMockRecorder) CreateItem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockGalaxyClient)(nil).CreateItem), varargs...)
}

// CreateUser mocks base method.
func (m *MockGalaxyClient) CreateUser(arg0 context.Context, arg1 *pb.CreateUserRequest, arg2 ...grpc.CallOption) (*pb.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*pb.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockGalaxyClientMockRecorder) CreateUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockGalaxyClient)(nil).CreateUser), varargs...)
}

// DeleteEntry mocks base method.
func (m *MockGalaxyClient) DeleteEntry(arg0 context.Context, arg1 *pb.DeleteEntryRequest, arg2 ...grpc.CallOption) (*pb.DeleteEntryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEntry", varargs...)
	ret0, _ := ret[0].(*pb.DeleteEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntry indicates an expected call of DeleteEntry.
func (mr *MockGalaxyClientMockRecorder) DeleteEntry(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntry", reflect.TypeOf((*MockGalaxyClient)(nil).DeleteEntry), varargs...)
}

// DeleteItem mocks base method.
func (m *MockGalaxyClient) DeleteItem(arg0 context.Context, arg1 *pb.DeleteItemRequest, arg2 ...grpc.CallOption) (*pb.DeleteItemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteItem", varargs...)
	ret0, _ := ret[0].(*pb.DeleteItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockGalaxyClientMockRecorder) DeleteItem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockGalaxyClient)(nil).DeleteItem), varargs...)
}

// GetEntry mocks base method.
func (m *MockGalaxyClient) GetEntry(arg0 context.Context, arg1 *pb.GetEntryRequest, arg2 ...grpc.CallOption) (*pb.GetEntryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEntry", varargs...)
	ret0, _ := ret[0].(*pb.GetEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntry indicates an expected call of GetEntry.
func (mr *MockGalaxyClientMockRecorder) GetEntry(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntry", reflect.TypeOf((*MockGalaxyClient)(nil).GetEntry), varargs...)
}

// GetItem mocks base method.
func (m *MockGalaxyClient) GetItem(arg0 context.Context, arg1 *pb.GetItemRequest, arg2 ...grpc.CallOption) (*pb.GetItemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItem", varargs...)
	ret0, _ := ret[0].(*pb.GetItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockGalaxyClientMockRecorder) GetItem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockGalaxyClient)(nil).GetItem), varargs...)
}

// GetUser mocks base method.
func (m *MockGalaxyClient) GetUser(arg0 context.Context, arg1 *pb.GetUserRequest, arg2 ...grpc.CallOption) (*pb.GetUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*pb.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockGalaxyClientMockRecorder) GetUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockGalaxyClient)(nil).GetUser), varargs...)
}

// ListEntries mocks base method.
func (m *MockGalaxyClient) ListEntries(arg0 context.Context, arg1 *pb.ListEntriesRequest, arg2 ...grpc.CallOption) (*pb.ListEntriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEntries", varargs...)
	ret0, _ := ret[0].(*pb.ListEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntries indicates an expected call of ListEntries.
func (mr *MockGalaxyClientMockRecorder) ListEntries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntries", reflect.TypeOf((*MockGalaxyClient)(nil).ListEntries), varargs...)
}

// ListEntriesByItem mocks base method.
func (m *MockGalaxyClient) ListEntriesByItem(arg0 context.Context, arg1 *pb.ListEntriesByItemRequest, arg2 ...grpc.CallOption) (*pb.ListEntriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEntriesByItem", varargs...)
	ret0, _ := ret[0].(*pb.ListEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntriesByItem indicates an expected call of ListEntriesByItem.
func (mr *MockGalaxyClientMockRecorder) ListEntriesByItem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntriesByItem", reflect.TypeOf((*MockGalaxyClient)(nil).ListEntriesByItem), varargs...)
}

// ListEntriesByUser mocks base method.
func (m *MockGalaxyClient) ListEntriesByUser(arg0 context.Context, arg1 *pb.ListEntriesByUserRequest, arg2 ...grpc.CallOption) (*pb.ListEntriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEntriesByUser", varargs...)
	ret0, _ := ret[0].(*pb.ListEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntriesByUser indicates an expected call of ListEntriesByUser.
func (mr *MockGalaxyClientMockRecorder) ListEntriesByUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntriesByUser", reflect.TypeOf((*MockGalaxyClient)(nil).ListEntriesByUser), varargs...)
}

// ListItems mocks base method.
func (m *MockGalaxyClient) ListItems(arg0 context.Context, arg1 *pb.ListItemsRequest, arg2 ...grpc.CallOption) (*pb.ListItemsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListItems", varargs...)
	ret0, _ := ret[0].(*pb.ListItemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListItems indicates an expected call of ListItems.
func (mr *MockGalaxyClientMockRecorder) ListItems(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListItems", reflect.TypeOf((*MockGalaxyClient)(nil).ListItems), varargs...)
}

// Login mocks base method.
func (m *MockGalaxyClient) Login(arg0 context.Context, arg1 *pb.LoginRequest, arg2 ...grpc.CallOption) (*pb.LoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*pb.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockGalaxyClientMockRecorder) Login(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockGalaxyClient)(nil).Login), varargs...)
}

// RenewAccessToken mocks base method.
func (m *MockGalaxyClient) RenewAccessToken(arg0 context.Context, arg1 *pb.RenewAccessTokenRequest, arg2 ...grpc.CallOption) (*pb.RenewAccessTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenewAccessToken", varargs...)
	ret0, _ := ret[0].(*pb.RenewAccessTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewAccessToken indicates an expected call of RenewAccessToken.
func (mr *MockGalaxyClientMockRecorder) RenewAccessToken(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewAccessToken", reflect.TypeOf((*MockGalaxyClient)(nil).RenewAccessToken), varargs...)
}

// UpdateItem mocks base method.
func (m *MockGalaxyClient) UpdateItem(arg0 context.Context, arg1 *pb.UpdateItemRequest, arg2 ...grpc.CallOption) (*pb.UpdateItemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateItem", varargs...)
	ret0, _ := ret[0].(*pb.UpdateItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockGalaxyClientMockRecorder) UpdateItem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockGalaxyClient)(nil).UpdateItem), varargs...)
}

// UpdateUser mocks base method.
func (m *MockGalaxyClient) UpdateUser(arg0 context.Context, arg1 *pb.UpdateUserRequest, arg2 ...grpc.CallOption) (*pb.UpdateUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUser", varargs...)
	ret0, _ := ret[0].(*pb.UpdateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockGalaxyClientMockRecorder) UpdateUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockGalaxyClient)(nil).UpdateUser), varargs...)
}
